{
  "hash": "e15eabf5540be6fe3b71b7de0dc00978",
  "result": {
    "markdown": "---\nexecute:\n  eval: false\n  cache: true\n  freeze: auto\n---\n\n# Introduction {.unnumbered}\n\n::: {.callout-note}\nThis introduction is written in the `index.qmd` file. Feel free to change it to your research introduction. \n:::\n\nThis research notebook is generated using Quarto Book and is useful for presenting your research during the lab meeting. The HTML format makes it easier to navigate through different sections and subsections in the notebook. The notebook also contains a PDF document (click on the icon on the upper left corner), so you can share it as a static report. You can host the notebook on GitHub, or compress and share the entire folder that include the HTML libraries, and the user can then open it locally on their computer. \n\nThe main files of the notebook are a set of `.qmd` files. I have organized them in a way where each file represents a weekly report. When adding a new `.qmd` file in your folder, remember to add the file name in the configuration file `_quarto.yml`. You can edit the files using any editing tools you like, such as VS Code, and render the notebook using the commend `quarto render` in the folder containing the `index.qmd` file. The following are some tactics that I think might be helpful for you. You can click on `</>Code` --> `View Source` on the upper right corner to view the original code for this introduction file. \n\n## Markdown Language\n\nThe notebook uses markdown language for formatting. You can use different numbers of pound signs for different headings, and organize key findings in a list using the minus sign. For example,\n\n```\n### Heading 1\n#### Heading 2\n```\n\nWhich will look like:\n\n### Heading 1\n#### Heading 2\n\n```\n- Key finding 1\n- Key finding 2\n- Key finding 3\n```\n\nWhich will look like:\n\n- Key finding 1\n- Key finding 2\n- Key finding 3\n\nTo learn more about the markdown language, see [Markdown Basics](https://quarto.org/docs/authoring/markdown-basics.html){target=\"_blank\"}. \n\n## Code Inclusion\n\nYou can include your code here in the notebook for others to review your code. However, in order to reduce the rendering time, I have set in each `.qmd` file globally to avoid running the code chunks:\n\n```\n---\ntitle: \"My Document\"\nexecute:\n  eval: false\n---\n```\n\nI would recommand that you include the code in the notebook and manually run the code chunks by clicking \"Run Cell\" in VS Code, and save the resulting objects using the `pickle` package. For analysis that requires extensive resources, you can write you code in scripts and run it on the CBCB cluster. Below is an example of training a random forest classifier on the iris data set.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import preprocessing\nimport pickle\n```\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ndata = pd.read_csv('./data/iris.csv')\nX = data.iloc[:, 0:4]\ny = data.Species\nle = preprocessing.LabelEncoder()\ny = le.fit_transform(y)\n\nclf = RandomForestClassifier(max_depth=2, random_state=0, oob_score=True)\nclf.fit(X, y)\n\nwith open('./pickle_data/example_rf.pkl', 'wb') as out:\n  pickle.dump(clf, out, pickle.HIGHEST_PROTOCOL)\n```\n:::\n\n\nFor more information about the code chunk options, see [Execution Options](https://quarto.org/docs/computations/execution-options.html){target=\"_blank\"}.\n\n## Figures\n\nTo display figures is the notebook, you can use the following syntex:\n\n```\n![Figure caption.](file_path){#fig-ref}\n```\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nimport pickle\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n```\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nwith open('./pickle_data/example_rf.pkl', 'rb') as inp:\n  clf = pickle.load(inp)\n\nres = pd.DataFrame({'Setosa': clf.oob_decision_function_[:, 0], \n                    'Versicolor': clf.oob_decision_function_[:, 1],\n                    'Virginica': clf.oob_decision_function_[:, 2]})\n\nsns.pairplot(res)\nplt.savefig('./figures/rf_res.pdf', format='pdf')\nplt.savefig('./figures/rf_res.png', format='png')\n```\n:::\n\n\n![Comparison of random forest predictions across different species.](./figures/rf_res){#fig-rf-res}\n\nSee [Figures](https://quarto.org/docs/authoring/figures.html){target=\"_blank\"} for more information.\n\n## Cross References & Citations\n\nOne nice thing about Quarto book is that you can use cross references to refer tables and figures in the context. For example, @fig-rf-res shows paired comparisions of predictions on the iris classes. You can also cite articles in the notebook. For example, \n```\n[@Cummings:2008aa]\n``` \nwill reuslt in [@Cummings:2008aa]. The citations are organized in the file `references.bib`, you can use any BibTex editors such as BibDesk to manage the citations. \n\n## Package Version Control\n\nIt is a good practice to set up a virtual environment for your project to keep all package versions controlled, so that others can easily reproduce your experiments. You can use [Conda/Minoconda](https://docs.conda.io/en/latest/miniconda.html){target=\"_blank\"} or other similar tools. I have saved my Conda environment in the file `2023_reu.yml`. After installing Miniconda, you can use the following command to create the environment. \n```\nconda env create --prefix env -f environment.yml\n```\nOr, you can create your own enrovinment from scratch. See [Virtual Environments](https://quarto.org/docs/projects/virtual-environments.html#using-conda){target=\"_blank\"} for more information.\n\nFinally, usually we would include an output of sessoin info to keep track of the package versions used. See the chunck below for the code and its output. \n\n```\n# | eval: true\n\nimport session_info\nsession_info.show()\n```\n\n::: {.content-visible when-format=\"html\"}\n\n::: {.cell execution_count=6}\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<details>\n<summary>Click to view session information</summary>\n<pre>\n-----\nmatplotlib          3.7.1\npandas              1.5.3\nseaborn             0.12.2\nsession_info        1.0.0\nsklearn             1.2.2\n-----\n</pre>\n<details>\n<summary>Click to view modules imported as dependencies</summary>\n<pre>\nPIL                 9.4.0\nappnope             0.1.3\nasttokens           NA\nbackcall            0.2.0\nbeta_ufunc          NA\nbinom_ufunc         NA\nbottleneck          1.3.5\ncomm                0.1.3\ncycler              0.10.0\ncython_runtime      NA\ndateutil            2.8.2\ndebugpy             1.6.7\ndecorator           5.1.1\nexecuting           1.2.0\nhypergeom_ufunc     NA\nipykernel           6.23.1\njedi                0.18.2\njoblib              1.2.0\nkiwisolver          1.4.4\nmkl                 2.4.0\nmpl_toolkits        NA\nnbinom_ufunc        NA\nncf_ufunc           NA\nnumexpr             2.8.4\nnumpy               1.24.3\npackaging           23.1\nparso               0.8.3\npexpect             4.8.0\npickleshare         0.7.5\npkg_resources       NA\nplatformdirs        3.5.3\nprompt_toolkit      3.0.38\npsutil              5.9.5\nptyprocess          0.7.0\npure_eval           0.2.2\npydev_ipython       NA\npydevconsole        NA\npydevd              2.9.5\npydevd_file_utils   NA\npydevd_plugins      NA\npydevd_tracing      NA\npygments            2.15.1\npyparsing           3.0.9\npytz                2022.7\nscipy               1.9.3\nsetuptools          67.8.0\nsix                 1.16.0\nstack_data          0.6.2\nthreadpoolctl       2.2.0\ntornado             6.3.2\ntraitlets           5.9.0\ntyping_extensions   NA\nwcwidth             0.2.6\nzmq                 25.1.0\nzoneinfo            NA\n</pre>\n</details> <!-- seems like this ends pre, so might as well be explicit -->\n<pre>\n-----\nIPython             8.14.0\njupyter_client      8.2.0\njupyter_core        5.3.0\n-----\nPython 3.10.11 (main, May 15 2023, 19:29:30) [Clang 14.0.6 ]\nmacOS-10.16-x86_64-i386-64bit\n-----\nSession information updated at 2023-06-14 17:21\n</pre>\n</details>\n```\n:::\n:::\n\n\n:::\n\n::: {.callout-tip}\nIn order to run the code `session_info.show()` when rendering the notebook, I would usually put the code that imports libraries in the same chunk, such as those in the above subsections, and set the chunk to run during the rendering process using `# | eval: true`. This may result in a longer rendering time, but you can always use `cache: true` at the beginning of the file to store the executed results, and set `freeze: auto` so that updates will be executed again. For more information, refer to [Managing Execution](https://quarto.org/docs/projects/code-execution.html){target=\"_blank\"}.\n:::\n\nI hope these intructions are helpful for you to start your research project. Happy learning!\n\n",
    "supporting": [
      "index_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}